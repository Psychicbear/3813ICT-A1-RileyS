{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let DataService = /*#__PURE__*/(() => {\n  class DataService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.serverLocation = 'http://127.0.0.1:3000';\n      this.dataUser = {\n        id: -1,\n        username: '',\n        email: '',\n        valid: false,\n        role: 0\n      };\n      this.groups = new BehaviorSubject([]);\n      this.valid = false;\n      this.id = 0;\n      this.init();\n      this.fetchChannelContent(0, 0);\n    }\n\n    init() {\n      let initData = this.getUser();\n\n      if (initData != null && initData.valid) {\n        this.dataUser = initData;\n        this.valid = true;\n        this.id = initData.id;\n        this.fetchGroups(this.dataUser.id).subscribe(res => {\n          this.groups.next(res);\n        });\n      } else {\n        this.router.navigate(['login']);\n      }\n    }\n\n    forceLogin() {\n      if (!this.valid) {\n        this.router.navigate(['login']);\n      }\n    }\n\n    validateLogin(username, password) {\n      //Check if login is valid and allow user in if true\n      return this.http.post(this.serverLocation + '/api/login', {\n        email: username,\n        password: password,\n        valid: false\n      });\n    }\n\n    getUser() {\n      let dataCheck = localStorage.getItem('user');\n\n      if (dataCheck != null) {\n        return JSON.parse(dataCheck);\n      } else {\n        console.log('Error fetching data');\n        return null;\n      }\n    }\n\n    saveUser(userData) {\n      localStorage.setItem('user', JSON.stringify(userData));\n      this.dataUser = userData;\n    }\n\n    deleteUser(userID, targetID) {\n      this.http.post(this.serverLocation + '/api/login/deleteUser', {\n        userID: userID,\n        targetID: targetID\n      }).subscribe(res => {\n        if (!res.success) {\n          console.log(res.error);\n        } else {\n          console.log('Somehow this worked?');\n        }\n      });\n    }\n\n    fetchGroups(userID) {\n      return this.http.post(this.serverLocation + '/api/groups', {\n        userID: userID\n      }); //Get groups that are relevant to user\n    }\n\n    fetchGroupParticipants(groupID) {\n      return this.http.post(this.serverLocation + '/api/groups/participants', {\n        groupID: groupID\n      });\n    }\n\n    reloadGroups(userID) {\n      this.http.post(this.serverLocation + '/api/groups', {\n        userID: userID\n      }).subscribe(res => {\n        console.log(res);\n        this.groups.next(res);\n      });\n    }\n\n    fetchChannels(userID, groupID) {\n      //Get channels that are relevant to user\n      return this.http.post(this.serverLocation + '/api/channels', {\n        groupID: groupID,\n        userID: userID\n      });\n    }\n\n    newGroup(userID, groupName) {\n      return this.http.post(this.serverLocation + '/api/groups/new', {\n        userID: userID,\n        groupName: groupName\n      });\n    }\n\n    editGroup(userID, group) {\n      return this.http.post(this.serverLocation + '/api/groups/edit', {\n        userID: userID,\n        group: group\n      });\n    }\n\n    deleteGroup(userID, groupID) {\n      return this.http.post(this.serverLocation + '/api/groups/delete', {\n        userID: userID,\n        groupID: groupID\n      });\n    }\n\n    newChannel(userID, groupID, name) {\n      return this.http.post(this.serverLocation + '/api/channels/add', {\n        userID: userID,\n        groupID: groupID,\n        name: name\n      });\n    }\n\n    editChannel(userID, groupID, channel) {\n      return this.http.post(this.serverLocation + '/api/channels/edit', {\n        userID: userID,\n        groupID: groupID,\n        channel: channel\n      });\n    }\n\n    deleteChannel(userID, groupID, channelID) {\n      return this.http.post(this.serverLocation + '/api/channels/delete', {\n        userID: userID,\n        groupID: groupID,\n        channelID: channelID\n      });\n    }\n\n    fetchChannelContent(userID, channelID) {\n      this.http.post(this.serverLocation + '/api/channels/readMessages', {\n        userID: userID,\n        channelID: channelID\n      }).subscribe(res => {\n        console.log(res);\n      }); //Get data within selected channel\n    }\n\n  }\n\n  DataService.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  DataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac,\n    providedIn: 'root'\n  });\n  return DataService;\n})();","map":null,"metadata":{},"sourceType":"module"}